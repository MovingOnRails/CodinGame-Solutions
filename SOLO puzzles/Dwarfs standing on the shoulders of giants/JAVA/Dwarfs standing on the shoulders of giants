import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class DirectedNode {
    int number;
    List<Integer> directedEdges = new LinkedList<>();
    DirectedNode(int number){
        this.number = number;
    }
}

class Solution {

    public static DirectedNode findTreeRoot(List<DirectedNode> nodes){
        List<Integer> rightSideOfEdges = new LinkedList<>();
        
        for(DirectedNode currentNode : nodes){
            for(Integer rightSide : currentNode.directedEdges){
                rightSideOfEdges.add(rightSide);
            }
        }
        DirectedNode root = nodes.getFirst();
        for(DirectedNode currNode : nodes){
            boolean found = false;
            for(Integer rightSide : rightSideOfEdges ){
                if(currNode.number == rightSide){
                    found = true;
                }
            }
            if(!found){
                root = currNode;
                break;
            }
        }
        return root;
    }

    public static int DFS(DirectedNode currNode, List<DirectedNode> nodes){
        System.err.println("currNode: "+currNode.number);
        if(currNode.directedEdges.isEmpty()){
            return 0;
        }
        int maxPathLength = 0;
        for(Integer recursiveNodeNumber : currNode.directedEdges){
            Optional<DirectedNode> recursiveNode = findDirectedNodeWithNumber(nodes, recursiveNodeNumber);
            int recursivePathLength = 0;
            if(recursiveNode.isPresent()){
                recursivePathLength = DFS(recursiveNode.get(), nodes);
            }
            
            if(recursivePathLength > maxPathLength){
                maxPathLength = recursivePathLength;
            }
        }
        return maxPathLength+1;
    }

    public static Optional<DirectedNode> findDirectedNodeWithNumber(List<DirectedNode> nodes, int number){
        Optional<DirectedNode> found = Optional.empty();
        for(DirectedNode node : nodes){
            if(node.number == number){
                found = Optional.of(node);
                break;
            }
        }
        return found;
    }

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt(); // the number of relationships of influence
        List<DirectedNode> influences = new LinkedList<>();
        System.err.println("--N--: "+n);
        for (int i = 0; i < n; i++) {
            int x = in.nextInt(); // a relationship of influence between two people (x influences y)
            int y = in.nextInt();
            System.err.println("x: "+x);
            System.err.println("y: "+y);
            System.err.println("-----");
            Optional<DirectedNode> foundNode = findDirectedNodeWithNumber(influences, x);
            if(foundNode.isEmpty()){
                DirectedNode currNode = new DirectedNode(x);
                currNode.directedEdges.add(y);
                influences.add(currNode);
            } else {
                DirectedNode currNode = foundNode.get();
                currNode.directedEdges.add(y);
            }
        }
        for(DirectedNode node : influences){
            System.err.println("node: "+node.number);
        }
        // TODO use different roots and get the maximum from the paths of different roots
        DirectedNode root = findTreeRoot(influences);
        System.err.println("root: "+root.number);
        int maxPathLength = DFS(root, influences);
        System.err.println("maxPathLength: "+maxPathLength);


        // The number of people involved in the longest succession of influences
        System.out.println(maxPathLength+1);
    }
}
