import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Position {
    public int y;
    public int x;
    Position(int y,int x){
        this.x = x;
        this.y = y;
    }
    Position move(Direction direction, List<Direction> moveList, boolean addDirectionToMoveList){
        if(addDirectionToMoveList){
            moveList.add(direction);
        }
        switch(direction){
            case Direction.SOUTH:
                return this.moveSOUTH();
            case Direction.EAST:
                return this.moveEAST();
            case Direction.NORTH:
                return this.moveNORTH();
            case Direction.WEST:
                return this.moveWEST();
        }
        return new Position(-1,-1);
    }
    Position moveSOUTH(){
        return new Position(this.y+1,this.x);
    }
    Position moveEAST(){
        return new Position(this.y, this.x+1);
    }
    Position moveNORTH(){
        return new Position(this.y-1, this.x);
    }
    Position moveWEST(){
        return new Position(this.y,this.x-1);
    }

    public String asString(){
        return "("+this.y+","+this.x+")";
    }
    
    boolean equals(Position other){
        return (this.x == other.x) && (this.y == other.y);
    }
}

enum Direction {
    SOUTH("SOUTH"), 
    EAST("EAST"), 
    NORTH("NORTH"), 
    WEST("WEST");

    public String strValue;

    Direction(String strValue){
        this.strValue = strValue;
    }

    public Direction nextDirection(){
        return this.values()[(this.ordinal()+1) % this.values().length];
    }
}

enum Priority {
    OFF("OFF"),
    SOUTH("SOUTH"),
    EAST("EAST"),
    NORTH("NORTH"),
    WEST("WEST");

    public String strValue;

    Priority(String strValue){
        this.strValue = strValue;
    }

    public Priority nextPriority(boolean inverterON){
        if(inverterON){
            if(this.ordinal() == 0){
                return this.values()[this.values().length-1];
            } else {
                return this.values()[this.ordinal()-1];
            }
        } else {
            return this.values()[(this.ordinal()+1) % this.values().length];
        }
    }

    public Direction asDirection(){
        return Direction.values()[this.ordinal()-1];
    }
}

class RobotState {
    Position position = new Position(-1,-1);
    Direction direction = Direction.SOUTH;
    boolean beerMode = false;
    Priority priority = Priority.OFF;
    List<Direction> moveList = new LinkedList<>();
    boolean finished = false;
    boolean inverterON = false;

    Position nextTentativePosition(){
        Position res = new Position(-1,-1);
        if(this.priority == Priority.OFF){
            res = this.position.move(this.direction, this.moveList, false);
        } else {
            Direction dir = this.priority.asDirection();
            res = this.position.move(dir, this.moveList, false);
        }
        return res;
    }

    Position move(){
        if(this.priority == Priority.OFF){
            this.position = this.position.move(this.direction, this.moveList, true);
        }else{
            Direction dir = this.priority.asDirection();
            this.position = this.position.move(dir, this.moveList, true);
            this.direction = dir;
        }
        this.priority = Priority.OFF;
        return this.position;
    }
}

class Solution {

    public static Position teleport(Position robotPosition, char[][] map, int L, int C){
        List<Position> teleports = new ArrayList<>();
        for(int i=0;i<L;i++){
            for(int j=0;j<C;j++){
                if(map[i][j] == 'T'){
                    teleports.add(new Position(i,j));
                }
            }
        }
        Position teleportTO = new Position(-1,-1);
        for(Position t : teleports){
            if(!t.equals(robotPosition)){
                teleportTO = t;
            }
        }
        return teleportTO;
    }

    
    public static RobotState getNextState(char nextCell, RobotState robotState, char[][] map, int L, int C){
        System.err.println("nextCell: "+nextCell);
        System.err.println("robotState.position: "+robotState.position.asString());
        System.err.println("robotState.direction: "+robotState.direction.strValue);
        System.err.println("robotState.priority: "+robotState.priority.strValue);
        System.err.println("robotState.priority.inverterON: "+robotState.inverterON);
        System.err.println("robotState.beerMode"+robotState.beerMode);
        //System.err.println("");
        switch(nextCell){
            case '@':
            case ' ':
                robotState.move();
                return robotState;
            case 'X':
                if(robotState.beerMode){
                    robotState.move();
                    Position robotPosition = robotState.position;
                    map[robotPosition.y][robotPosition.x] = ' ';
                } else {
                    robotState.priority = robotState.priority.nextPriority(robotState.inverterON);
                }
                return robotState;
            case '#':
                robotState.priority = robotState.priority.nextPriority(robotState.inverterON);
                return robotState;
            case 'S':
                robotState.move();
                robotState.direction = Direction.SOUTH;
                return robotState;
            case 'E':
                robotState.move();
                robotState.direction = Direction.EAST;
                return robotState;
            case 'N':
                robotState.move();
                robotState.direction = Direction.NORTH;
                return robotState;
            case 'W':
                robotState.move();
                robotState.direction = Direction.WEST;
                return robotState;
            case 'B':
                robotState.move();
                robotState.beerMode = !robotState.beerMode;
                return robotState;
            case 'I':
                robotState.move();
                robotState.inverterON = !robotState.inverterON;
                return robotState;
            case 'T':
                robotState.move();
                robotState.position = teleport(robotState.position, map, L, C);
                return robotState;
            case '$':
                robotState.move();
                robotState.finished = true;
                return robotState;
        }
        return new RobotState();
    }

    public static Position getInitialPosition(char[][] map, int L, int C){
        for(int i=0;i<L;i++){
            for(int j=0;j<C;j++){
                char currentCell = map[i][j];
                if(currentCell == '@'){
                    return new Position(i,j);
                }
            }
        }
        return new Position(-1,-1);
    }

    public static void printMap(char[][] map, int L, int C){
        for(int i=0;i<L;i++){
            for(int j=0;j<C;j++){
                System.err.print(map[i][j]);
            }
            System.err.print('\n');
        }
    }

    public static void printMoveList(List<Direction> moveList){
        for(Direction d : moveList){
            System.out.println(d.strValue);
        }
    }

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int L = in.nextInt();
        int C = in.nextInt();
        char[][] map = new char[L][C];
        if (in.hasNextLine()) {
            in.nextLine();
        }
        for (int i = 0; i < L; i++) {
            String row = in.nextLine();
            for(int j = 0; j < C; j++){
                char cell = row.charAt(j);
                map[i][j] = cell;
            }
        }

        RobotState currentRobotState = new RobotState();
        currentRobotState.position = getInitialPosition(map, L, C);
        currentRobotState.direction = Direction.SOUTH;
        currentRobotState.beerMode = false;
        currentRobotState.moveList = new LinkedList<>();

        boolean isLooping = false;
        printMap(map,L,C);
        while(true){
            Position nextTentativePosition = currentRobotState.nextTentativePosition();
            char nextCell = map[nextTentativePosition.y][nextTentativePosition.x];

            RobotState nextRobotState = getNextState(nextCell, currentRobotState, map, L, C);

            if(nextCell == '$'){
                break;
            }

            currentRobotState = nextRobotState;

            System.err.println("--------");
        }
        if(!isLooping){
            printMoveList(currentRobotState.moveList);
        } else {
            System.out.println("LOOP");
        }
        
    }
}
